#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour les nouvelles fonctionnalit√©s de filtrage du dashboard
"""

import pandas as pd
from datetime import datetime, timedelta

def tester_filtrage_periode():
    """
    Teste les fonctionnalit√©s de filtrage par p√©riode
    """
    print("üß™ Test des fonctionnalit√©s de filtrage par p√©riode...")
    
    try:
        # Charger les donn√©es
        df = pd.read_excel("Formulaire_FINAL_OPTIMISE.xlsx")
        print(f"‚úÖ Donn√©es charg√©es: {len(df)} lignes")
        
        # Convertir les dates
        df['horodateur'] = pd.to_datetime(df['horodateur'], format='%d/%m/%Y %H:%M:%S', errors='coerce')
        
        # Afficher la p√©riode compl√®te
        date_min = df['horodateur'].min()
        date_max = df['horodateur'].max()
        print(f"üìÖ P√©riode compl√®te: {date_min.strftime('%d/%m/%Y')} - {date_max.strftime('%d/%m/%Y')}")
        
        # Test 1: Filtrage par mois
        print(f"\nüîç Test 1: Filtrage par mois")
        premier_mois = df['horodateur'].dt.to_period('M').mode()[0]
        mask_mois = df['horodateur'].dt.to_period('M') == premier_mois
        df_mois = df[mask_mois]
        print(f"  Mois s√©lectionn√©: {premier_mois}")
        print(f"  Donn√©es filtr√©es: {len(df_mois)} lignes ({(len(df_mois)/len(df)*100):.1f}%)")
        
        # Test 2: Filtrage par semaine
        print(f"\nüîç Test 2: Filtrage par semaine")
        date_debut_semaine = date_max - timedelta(days=7)
        mask_semaine = df['horodateur'] >= date_debut_semaine
        df_semaine = df[mask_semaine]
        print(f"  P√©riode: Derniers 7 jours avant {date_max.strftime('%d/%m/%Y')}")
        print(f"  Donn√©es filtr√©es: {len(df_semaine)} lignes ({(len(df_semaine)/len(df)*100):.1f}%)")
        
        # Test 3: Filtrage par p√©riode personnalis√©e
        print(f"\nüîç Test 3: Filtrage p√©riode personnalis√©e")
        milieu = date_min + (date_max - date_min) / 2
        date_debut_perso = milieu - timedelta(days=15)
        date_fin_perso = milieu + timedelta(days=15)
        
        mask_perso = (df['horodateur'] >= date_debut_perso) & (df['horodateur'] <= date_fin_perso)
        df_perso = df[mask_perso]
        print(f"  P√©riode: {date_debut_perso.strftime('%d/%m/%Y')} - {date_fin_perso.strftime('%d/%m/%Y')}")
        print(f"  Donn√©es filtr√©es: {len(df_perso)} lignes ({(len(df_perso)/len(df)*100):.1f}%)")
        
        # Test des m√©triques avec filtrage
        print(f"\nüìä Test des m√©triques avec donn√©es filtr√©es:")
        
        if 'type_pack' in df_perso.columns:
            packs_originaux = df['type_pack'].value_counts()
            packs_filtres = df_perso['type_pack'].value_counts()
            print(f"  Packs (original): {len(packs_originaux)} types")
            print(f"  Packs (filtr√©): {len(packs_filtres)} types")
        
        if 'pays' in df_perso.columns:
            pays_originaux = df['pays'].nunique()
            pays_filtres = df_perso['pays'].nunique()
            print(f"  Pays (original): {pays_originaux}")
            print(f"  Pays (filtr√©): {pays_filtres}")
        
        if 'age' in df_perso.columns:
            age_original = df['age'].mean()
            age_filtre = df_perso['age'].mean()
            print(f"  √Çge moyen (original): {age_original:.1f} ans")
            print(f"  √Çge moyen (filtr√©): {age_filtre:.1f} ans")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def tester_filtrage_multi_criteres():
    """
    Teste le filtrage par plusieurs crit√®res combin√©s
    """
    print(f"\nüß™ Test du filtrage multi-crit√®res...")
    
    try:
        df = pd.read_excel("Formulaire_FINAL_OPTIMISE.xlsx")
        df['horodateur'] = pd.to_datetime(df['horodateur'], format='%d/%m/%Y %H:%M:%S', errors='coerce')
        
        # Combinaison de filtres
        print(f"üìä Donn√©es originales: {len(df)} lignes")
        
        # Filtre 1: P√©riode
        date_min = df['horodateur'].min()
        date_max = df['horodateur'].max()
        milieu = date_min + (date_max - date_min) / 2
        
        df_filtered = df[df['horodateur'] >= milieu].copy()
        print(f"  Apr√®s filtre p√©riode (2√®me moiti√©): {len(df_filtered)} lignes")
        
        # Filtre 2: Pack le plus populaire
        if 'type_pack' in df_filtered.columns:
            pack_populaire = df_filtered['type_pack'].mode()[0]
            df_filtered = df_filtered[df_filtered['type_pack'] == pack_populaire]
            print(f"  Apr√®s filtre pack '{pack_populaire}': {len(df_filtered)} lignes")
        
        # Filtre 3: Pays avec le plus de participants
        if 'pays' in df_filtered.columns and len(df_filtered) > 0:
            pays_principal = df_filtered['pays'].mode()[0] if len(df_filtered['pays'].mode()) > 0 else None
            if pays_principal:
                df_filtered = df_filtered[df_filtered['pays'] == pays_principal]
                print(f"  Apr√®s filtre pays '{pays_principal}': {len(df_filtered)} lignes")
        
        # R√©sultat final
        reduction = ((len(df) - len(df_filtered)) / len(df)) * 100
        print(f"üéØ R√©sultat final: {len(df_filtered)} lignes (r√©duction de {reduction:.1f}%)")
        
        if len(df_filtered) > 0:
            print(f"‚úÖ Filtrage multi-crit√®res r√©ussi")
            return True
        else:
            print(f"‚ö†Ô∏è  Aucune donn√©e ne correspond aux crit√®res")
            return True  # Ce n'est pas une erreur, juste un r√©sultat de filtrage
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test multi-crit√®res: {e}")
        return False

def tester_cas_limites():
    """
    Teste les cas limites du filtrage
    """
    print(f"\nüß™ Test des cas limites...")
    
    try:
        df = pd.read_excel("Formulaire_FINAL_OPTIMISE.xlsx")
        df['horodateur'] = pd.to_datetime(df['horodateur'], format='%d/%m/%Y %H:%M:%S', errors='coerce')
        
        # Cas 1: P√©riode tr√®s restreinte (1 jour)
        date_specifique = df['horodateur'].dt.date.mode()[0]
        df_jour = df[df['horodateur'].dt.date == date_specifique]
        print(f"üìÖ Cas 1 - Un seul jour ({date_specifique}): {len(df_jour)} lignes")
        
        # Cas 2: P√©riode inexistante
        date_future = df['horodateur'].max() + timedelta(days=30)
        df_futur = df[df['horodateur'] > date_future]
        print(f"üìÖ Cas 2 - P√©riode future: {len(df_futur)} lignes")
        
        # Cas 3: Tous les filtres appliqu√©s
        if len(df) > 0:
            # Prendre les crit√®res les plus restrictifs
            df_restrictif = df.copy()
            
            if 'pays' in df.columns:
                pays_rare = df['pays'].value_counts().tail(1).index[0]
                df_restrictif = df_restrictif[df_restrictif['pays'] == pays_rare]
            
            if 'type_pack' in df_restrictif.columns and len(df_restrictif) > 0:
                pack_disponible = df_restrictif['type_pack'].value_counts().index[0]
                df_restrictif = df_restrictif[df_restrictif['type_pack'] == pack_disponible]
            
            print(f"üéØ Cas 3 - Filtres tr√®s restrictifs: {len(df_restrictif)} lignes")
        
        print(f"‚úÖ Tests des cas limites termin√©s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests de cas limites: {e}")
        return False

def generer_scenarios_test():
    """
    G√©n√®re des sc√©narios de test pour le dashboard
    """
    print(f"\nüìã G√©n√©ration de sc√©narios de test...")
    
    scenarios = []
    
    # Sc√©nario 1: Analyse mensuelle
    scenarios.append({
        "nom": "Analyse Mensuelle",
        "description": "Filtrer les donn√©es du mois le plus actif",
        "filtre_periode": "Mois avec le plus d'inscriptions",
        "filtre_pays": "Tous",
        "filtre_pack": "Tous",
        "objectif": "Identifier les tendances du mois le plus actif"
    })
    
    # Sc√©nario 2: Focus g√©ographique
    scenarios.append({
        "nom": "Focus G√©ographique",
        "description": "Analyser un pays sp√©cifique sur toute la p√©riode",
        "filtre_periode": "Toute la p√©riode",
        "filtre_pays": "Cameroun",
        "filtre_pack": "Tous",
        "objectif": "Comprendre le comportement d'un march√© sp√©cifique"
    })
    
    # Sc√©nario 3: Analyse produit
    scenarios.append({
        "nom": "Analyse Produit",
        "description": "√âtudier les utilisateurs d'un pack premium",
        "filtre_periode": "Toute la p√©riode",
        "filtre_pays": "Tous",
        "filtre_pack": "Premium",
        "objectif": "Profiler les utilisateurs premium"
    })
    
    # Sc√©nario 4: Analyse temporelle r√©cente
    scenarios.append({
        "nom": "Tendances R√©centes",
        "description": "Analyser les 30 derniers jours",
        "filtre_periode": "30 derniers jours",
        "filtre_pays": "Tous",
        "filtre_pack": "Tous",
        "objectif": "Identifier les tendances r√©centes"
    })
    
    # Sc√©nario 5: Analyse crois√©e
    scenarios.append({
        "nom": "Analyse Crois√©e",
        "description": "Pack Essentiel au Cameroun",
        "filtre_periode": "Toute la p√©riode",
        "filtre_pays": "Cameroun",
        "filtre_pack": "Essentiel",
        "objectif": "Analyse d√©taill√©e d'un segment sp√©cifique"
    })
    
    # Sauvegarder les sc√©narios
    with open("Scenarios_Test_Dashboard.txt", 'w', encoding='utf-8') as f:
        f.write("SC√âNARIOS DE TEST POUR LE DASHBOARD\n")
        f.write("="*50 + "\n\n")
        
        for i, scenario in enumerate(scenarios, 1):
            f.write(f"SC√âNARIO {i}: {scenario['nom']}\n")
            f.write("-" * 30 + "\n")
            f.write(f"Description: {scenario['description']}\n")
            f.write(f"Filtre p√©riode: {scenario['filtre_periode']}\n")
            f.write(f"Filtre pays: {scenario['filtre_pays']}\n")
            f.write(f"Filtre pack: {scenario['filtre_pack']}\n")
            f.write(f"Objectif: {scenario['objectif']}\n\n")
    
    print(f"‚úÖ {len(scenarios)} sc√©narios g√©n√©r√©s et sauvegard√©s")
    return scenarios

def main():
    """
    Fonction principale de test
    """
    print("üöÄ TESTS DES FONCTIONNALIT√âS DE FILTRAGE")
    print("="*50)
    
    # Test 1: Filtrage par p√©riode
    test1 = tester_filtrage_periode()
    
    # Test 2: Filtrage multi-crit√®res
    test2 = tester_filtrage_multi_criteres()
    
    # Test 3: Cas limites
    test3 = tester_cas_limites()
    
    # G√©n√©ration des sc√©narios
    scenarios = generer_scenarios_test()
    
    # R√©sum√©
    print(f"\nüìä R√âSUM√â DES TESTS")
    print("="*30)
    print(f"‚úÖ Test filtrage p√©riode: {'R√âUSSI' if test1 else '√âCHEC'}")
    print(f"‚úÖ Test multi-crit√®res: {'R√âUSSI' if test2 else '√âCHEC'}")
    print(f"‚úÖ Test cas limites: {'R√âUSSI' if test3 else '√âCHEC'}")
    print(f"üìã Sc√©narios g√©n√©r√©s: {len(scenarios)}")
    
    tous_reussis = all([test1, test2, test3])
    
    if tous_reussis:
        print(f"\nüéâ TOUS LES TESTS SONT R√âUSSIS!")
        print(f"‚úÖ Le dashboard avec filtrage est pr√™t √† l'emploi")
        print(f"üåê Lancez: python lancer_dashboard.py")
    else:
        print(f"\n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â")
        print(f"üîß V√©rifiez la configuration du dashboard")

if __name__ == "__main__":
    main()
